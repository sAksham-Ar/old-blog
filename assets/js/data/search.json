[ { "title": "Introduction to Docker", "url": "/posts/Introduction-to-Docker/", "categories": "Development", "tags": "", "date": "2021-09-29 00:00:00 +0530", "snippet": "I have been playing around with Docker during the last few days ,and I am quite impressed by its abilities. I am writing this blog to share what I have learnt by trying to dockerize a simple Flask app.What is Docker?Docker is an open source containerizing platform, It enables developers package their applications into containers.What is a Container?According to Google, Containers are lightweight packages of your application code together with dependencies such as specific versions of programming language runtimes and libraries required to run your software services.What are the advantages of Docker?The major advantage of using docker is that you do not need to setup your application again and again for different servers, you can just create a docker image once and then deploy it easily on other servers. It also helps when different applications require different versions dependencies as running them in separate containers prevents dependency conflict.Building the ApplicationLet us take a simple Flask app and try to dockerize it.Code of the app: from flask import Flaskimport mysql.connectorfrom mysql.connector import errorcodeapp = Flask(__name__)@app.route(&#39;/&#39;)def connect(): try: mydb = mysql.connector.connect( host=&quot;localhost&quot;, user=&quot;docker_user&quot;, password=&quot;Docker@123&quot;, database=&quot;docker&quot; ) return &quot;Connected&quot; except mysql.connector.Error as err: if err.errno == errorcode.ER_ACCESS_DENIED_ERROR: return &quot;Something is wrong with your user name or password&quot; elif err.errno == errorcode.ER_BAD_DB_ERROR: return &quot;Database does not exist&quot; else: return str(err)if __name__ == &#39;__main__&#39;: app.run(debug=True)Requirements of the app: mysql-connector-pythonflaskThe app just tries to connect to MySQL as user docker_user to access database docker and returnsConnected if the connection is successful.Now we need to create this user and database in MySQL.Start the MySQL client and run the following commands, CREATE DATABASE docker;CREATE USER docker_user@&#39;localhost&#39; identified by &#39;Docker@123&#39;;GRANT ALL PRIVILEGES ON docker.* TO docker_user;FLUSH PRIVILEGES;This first creates the database docker, then it creates the user docker_user and then grants privileges of the database docker to docker_user.Now after running the app and visiting it in the browser we see,Dockerizing the ApplicationTo create an image from the application, we would need to write a Dockerfile. The Dockerfile for this application is, # syntax=docker/dockerfile:1FROM python:3.9-slim-busterWORKDIR /appCOPY requirements.txt requirements.txtRUN pip install -r requirements.txtCOPY . .ARG FLASK_PORT=5000ENV FLASK_PORT=$FLASK_PORTENTRYPOINT python3 -m flask run --host=0.0.0.0 --port=${FLASK_PORT}Here we are first taking a base image of python3.9 which already has python and pip installed, then we are a creating a working directory so that we can write relative paths. We then copy our requirements.txt to our working directory and install the packages needed. Finally, we copy our code, taking port as an environment variable, and run the app.Note: it is important to run the flask app on 0.0.0.0 else we will note be able to forward it.Now, we can build the image using, docker build --tag flask-docker .Now using docker images we can see that our image has been built,Now for MySQL, there is already an official image on docker hub (it is a website from where docker gets images uploaded by other people), we just need to pass our environment variables, docker run --name db -e MYSQL_ROOT_PASSWORD=&quot;Docker@123&quot; -e MYSQL_DATABASE=&quot;docker&quot; -e MYSQL_USER=&quot;docker_user&quot; -e MYSQL_PASSWORD=&quot;Docker@123&quot; -d mysqlHere -d is for running in detached mode, by default docker is attached to the terminal so when we close it our application will also close.Now, let’s run our app on port 5000, docker run --name app -e FLASK_PORT=&quot;5000&quot; -p 5000:5000 -d flask-dockerThe -p flag maps the port 5000 of our pc to 5000 of the Docker conatiner.NetworksAs we can see our app cannot reach the database even though the database is running this is because they are running in separate containers. With Docker, we can add them both in the same network.First let us create a network, docker network create my_networkThen, changing the host in our app.py to name of the MySQL container db and rebuilding the image, from flask import Flaskimport mysql.connectorfrom mysql.connector import errorcodeapp = Flask(__name__)@app.route(&#39;/&#39;)def connect(): try: mydb = mysql.connector.connect( host=&quot;db&quot;, user=&quot;docker_user&quot;, password=&quot;Docker@123&quot;, database=&quot;docker&quot; ) return &quot;Connected&quot; except mysql.connector.Error as err: if err.errno == errorcode.ER_ACCESS_DENIED_ERROR: return &quot;Something is wrong with your user name or password&quot; elif err.errno == errorcode.ER_BAD_DB_ERROR: return &quot;Database does not exist&quot; else: return str(err)if __name__ == &#39;__main__&#39;: app.run(debug=True)Finally, we rerun our db and app with this network, docker run --name db -e MYSQL_ROOT_PASSWORD=&quot;Docker@123&quot; -e MYSQL_DATABASE=&quot;docker&quot; -e MYSQL_USER=&quot;docker_user&quot; -e MYSQL_PASSWORD=&quot;Docker@123&quot; -d --network my_network mysql docker run --name app -e FLASK_PORT=&quot;5000&quot; -p 5000:5000 -d --network my_network flask-dockerNow going to http://localhost:5000/,Docker-composeAs you can probably see that the commands we have to run have become very long, and we need to rerun then every time we change our image or our configuration. The solution to this is docker-compose, we just need to create a docker-compose.yml file.For our current setup: version: &quot;3.9&quot;services: app: image: flask-docker ports: - &quot;5000:5000&quot; environment: - FLASK_PORT=5000 db: image: mysql ports: - &quot;3306:3306&quot; environment: - MYSQL_ROOT_PASSWORD=Docker@123 - MYSQL_DATABASE=docker - MYSQL_USER=docker_user - MYSQL_PASSWORD=Docker@123Note: Different versions of docker-compose has different syntax see here.Now to run our setup we just need to run, docker-compose up -ddocker-compose already creates a default network, so we do not need to create another.ConclusionNow we have reduced our setup to a single command after installing docker and docker-compose.By default, data stored in Docker is written in the writable container layer which no longer exists after the container is destroyed, and it is also difficult to move. For persistent data you should use volumes.You are encouraged to learn more about docker at the official docs." }, { "title": "Using Selenium in Python", "url": "/posts/Using-Selenium-in-Python/", "categories": "Python", "tags": "", "date": "2021-04-29 00:00:00 +0530", "snippet": "Today we are going to learn how to automate your browser using Selenium in Python.Today we will go to Youtube search something and store the results as JSON.Scraping Youtube results is not possible using normal webscraping as it uses a JS framework.RequirementsFor web scraping we would require selenium library.Just install it with pip as: pip3 install seleniumYou would also require chromedriver if you have Chrome or geckodriver if you have Firefox.StartingFirstly, we would need to import the required libraries: from selenium import webdriverfrom selenium.webdriver.common.keys import Keysimport osimport jsonfrom time import sleepNow, we would need to provide the path for our chromedriver or geckodriver.(NOTE:I have kept the chromedriver in the same directory as my python script.)In python in Windows this would look like: driver=webdriver.Chrome(os.getcwd()+&quot;/chromedriver.exe&quot;)For Firefox: driver=webdriver.Firefox(os.getcwd()+&quot;/geckodriver.exe&quot;)We will now navigate to the youtube website. url=&quot;https://www.youtube.com/&quot;driver.get(url)Now the browser will go to youtube.com .Searching a videoThe best way in my opinion to learn selenium is running it in interactive mode.So through command line navigate to where your script is and run: python3 -i your_file_name.pyYou will see that a browser has opened and it has navigated to youtube.com.Next we need to get the serach bar, we do this by clicking inspect element on it.From this photo we can see that it is an input element id search. We get that element using selenium: search=driver.find_element_by_xpath(&quot;//input[@id=&#39;search&#39;]&quot;)Now we send what we want to type: search.send_keys(&quot;foo bar&quot;)As you can see foo bar is typed in the search bar.Now sending enter to search: search.send_keys(Keys.RETURN)Now it should have opened the results page.Storing it as JSONWe now need to store the title and links of videos so we first inspect element the title to find which element they are in.We see that they are in an a element with id = video-title. So we just find all of these and store the href and title in a list. videos=driver.find_elements_by_xpath(&quot;//a[@id=&#39;video-title&#39;]&quot;)ResultList=[]for video in videos: ResultDict={} ResultDict[&quot;title&quot;]=video.get_attribute(&quot;title&quot;) ResultDict[&quot;link&quot;]=video.get_Attribute(&quot;href&quot;) ResultList.append(ResultDict)print(json.dumps(ResultList,indent=4))Output:Entire Code from selenium import webdriverfrom selenium.webdriver.common.keys import Keysimport osimport jsonfrom time import sleepdriver=webdriver.Chrome(os.getcwd()+&quot;/chromedriver.exe&quot;)url=&quot;https://www.youtube.com/&quot;driver.get(url)search=driver.find_element_by_xpath(&quot;//input[@id=&#39;search&#39;]&quot;)search.send_keys(&quot;foo bar&quot;)sleep(1)#waiting for the text to be typedsearch.send_keys(Keys.RETURN)sleep(2)# to give time for the search to loadvideos=driver.find_elements_by_xpath(&quot;//a[@id=&#39;video-title&#39;]&quot;)ResultList=[]for video in videos: ResultDict={} ResultDict[&quot;title&quot;]=video.get_attribute(&quot;title&quot;) ResultDict[&quot;link&quot;]=video.get_attribute(&quot;href&quot;) ResultList.append(ResultDict)print(json.dumps(ResultList,indent=4))driver.quit()#closing the browserConclusionThis is just a small part of what selenium can do, read more here. Have fun experimenting with this!" }, { "title": "Web scraping in Python", "url": "/posts/Web-scraping-in-python/", "categories": "Python", "tags": "", "date": "2021-04-16 00:00:00 +0530", "snippet": "Today we are going to learn how to scrape a website in python. We will be scraping google to find results and store them as JSON.RequirementsFor web scraping we would require two libraries: requests bs4Just install them with pip as: pip3 install requests bs4Startingfirst we would need to import the required libraries: import requestsfrom bs4 import BeautifulSoupimport jsonSuppose we search “foo bar” in google the URL looks like this:https://www.google.com/search?q=foo+barThis means that if we want to search a custom search query we just replace all the spaces with + and add it to the end of https://www.google.com/search?q=.In python this would look like: BaseUrl=&quot;https://www.google.com/search?q=&quot;SearchTerm=&quot;foo+bar&quot;Url=BaseUrl+SearchTermWe will use requests to get HTML from this link which looks like: r=requests.get(Url)r.content will contain the HTML code.Searching HTML through BeautifulSoupWe first need to find out which class a single search result belong to, which we can do by clicking inspect element on a result.from this photo we can see that the title of the search is in a “h3”.So we just need to find all the “h3” elements. Using BeautifulSoup we can do that as: soup=BeautifulSoup(r.content,&quot;html.parser&quot;)titles=soup.find_all(&quot;h3&quot;)titles=titles[:-1]The last element is related searches so i truncated it. As we can see from the screen shot the links are just the prvious a tag to h3 so ew can get the links by: links=[]for title in titles: links.append(title.find_previous(&quot;a&quot;))Storing it as JSONWe can store the information in a python list of dictionaries and output it as JSON. We will get the text from “h3” and the “href” from “a” element. ResultsList=[]ResultDict={}for title,link in zip(titles,links): ResultDict={} # skipping google search results​ if link[&quot;href&quot;][7:22]==&quot;/www.google.com&quot;:​ continue​ ResultDict[&quot;title&quot;]=title.text # getting the actual URL from &quot;href&quot;​ ResultDict[&quot;link&quot;]=link[&quot;href&quot;][7:].split(&quot;&amp;amp;&quot;)[0]​ ResultsList.append(ResultDict)print(json.dumps(ResultsList,indent=4))The output looks like:Entire Code import requestsfrom bs4 import BeautifulSoupimport jsonBaseUrl=&quot;https://www.google.com/search?q=&quot;SearchTerm=&quot;foo+bar&quot;Url=BaseUrl+SearchTermr=requests.get(Url)soup=BeautifulSoup(r.content,&quot;html.parser&quot;)titles=soup.find_all(&quot;h3&quot;)titles=titles[:-1]links=[]for title in titles: links.append(title.find_previous(&quot;a&quot;))ResultsList=[]ResultDict={}for title,link in zip(titles,links): ResultDict={} # skipping google search results​ if link[&quot;href&quot;][7:22]==&quot;/www.google.com&quot;:​ continue​ ResultDict[&quot;title&quot;]=title.text # getting the actual URL from &quot;href&quot;​ ResultDict[&quot;link&quot;]=link[&quot;href&quot;][7:].split(&quot;&amp;amp;&quot;)[0]​ ResultsList.append(ResultDict)print(json.dumps(ResultsList,indent=4))ConclusionYou can take this one step further by taking the search term as an input from the user. I have only show you a small part of what Beautiful Soup can do, for more information go here. Have fun experimenting with this!" }, { "title": "Linked lists", "url": "/posts/Linked-lists/", "categories": "C++", "tags": "", "date": "2020-07-27 00:00:00 +0530", "snippet": "In link list a structure is declared as head and it has a next pointer which points to next item in the list and similarly all items have a next pointer.The next pointer of the last element points to NULL.The program goes as long as user does not input n.The user has two options whether to insert or delete from the list.In insert we declare a temporary variable temp which contains the number to insert which is done by putting temp-&amp;gt;next=head and head=temp which means that now head points to temp and temp points to the element which was previously head.Delete is done by simply putting head equal to its next element. #include&amp;lt;iostream&amp;gt;using namespace std;struct Linkedlist{ int a; struct Linkedlist* next;};LinkedList* head;void insert(int num){ Linkedlist* temp; temp= new Linkedlist; temp-&amp;gt;a=num; if(head!=NULL) { temp-&amp;gt;next=head; } else { temp-&amp;gt;next=NULL; } head=temp;}int del(){ if(head==NULL) { return -1; } Linkedlist *temp; temp=head; head=head-&amp;gt;next; return temp-&amp;gt;a;}int main(){ head=new Linkedlist; char choice; int c,num; do { cout&amp;lt;&amp;lt;&quot;1:Insert an element\\n&quot;; cout&amp;lt;&amp;lt;&quot;2:Delete an element\\n&quot;; cin&amp;gt;&amp;gt;c; switch(c) { case 1: cout&amp;lt;&amp;lt;&quot;Enter number to insert:&quot;; cin&amp;gt;&amp;gt;num; insert(num); cout&amp;lt;&amp;lt;&quot;\\n&quot;; break; case 2: num=del(); if(num!=-1) { cout&amp;lt;&amp;lt;&quot;The deleted number is:&quot;&amp;lt;&amp;lt;num&amp;lt;&amp;lt;&quot;\\n&quot;; } else { cout&amp;lt;&amp;lt;&quot;list is empty\\n&quot;; } break; default: cout&amp;lt;&amp;lt;&quot;Wrong choice\\n&quot;; } cout&amp;lt;&amp;lt;&quot;Do you want to continue?(y/n)\\n&quot;; cin&amp;gt;&amp;gt;choice; }while(choice==&#39;y&#39;); return 0;}OUTPUT:" }, { "title": "Dynamic declaration of structure using pointer", "url": "/posts/Dynamic-declaration-of-structure-using-pointer/", "categories": "C++", "tags": "", "date": "2020-07-25 00:00:00 +0530", "snippet": "We can dynamically declare sturrcture is C++ using just new and the name of the structure.To access its inner variables we have to use -&amp;gt; instead of . as it is a pointer ,however we can us . with * behind the pointer so that it becomes a structure variable. #include&amp;lt;iostream&amp;gt;using namespace std;struct boy{ char name[80]; int age;};int main(){ boy *b1; b1= new boy; cout&amp;lt;&amp;lt;&quot;Enter name:\\n&quot;; cin&amp;gt;&amp;gt;b1-&amp;gt;name; cout&amp;lt;&amp;lt;&quot;Enter age:\\n&quot;; cin&amp;gt;&amp;gt;b1-&amp;gt;age; cout&amp;lt;&amp;lt;&quot;Name is: &quot;&amp;lt;&amp;lt;(*b1).name&amp;lt;&amp;lt;&quot; Age is: &quot;&amp;lt;&amp;lt;(*b1).age; return 0;} OUTPUT:" }, { "title": "Double pointer", "url": "/posts/Double-pointer/", "categories": "C++", "tags": "", "date": "2020-07-22 00:00:00 +0530", "snippet": "We use double pointer or pointer to a pointer for things like dynamically declaring 2d arrays where we first dynamically declare its rows as 1d arrays and then for each row we declare its columns.The name of pointer points to address of the first row or to the pointer that points to first element of the first row.One * with the pointer points to the address of the first element of the first row and with two * it points to its value. #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ int **a,m,n,i; cout&amp;lt;&amp;lt;&quot;Enter rows:\\n&quot;; cin&amp;gt;&amp;gt;m; cout&amp;lt;&amp;lt;&quot;Enter columns:\\n&quot;; cin&amp;gt;&amp;gt;n; a=new int*[m]; for(i=0;i&amp;lt;n;i++) { a[i]=new int[n]; } a[0][0]=5; cout&amp;lt;&amp;lt;&quot;Address of first row:&quot;&amp;lt;&amp;lt;&amp;amp;a[0]&amp;lt;&amp;lt;&quot; and &quot;&amp;lt;&amp;lt;a&amp;lt;&amp;lt;&quot;\\n&quot;; cout&amp;lt;&amp;lt;&quot;Address of first elment of first row:&quot;&amp;lt;&amp;lt;&amp;amp;a[0][0]&amp;lt;&amp;lt;&quot; and &quot;&amp;lt;&amp;lt;*a&amp;lt;&amp;lt;&#39;\\n&#39;; cout&amp;lt;&amp;lt;&quot;Value of first element of first row:&quot;&amp;lt;&amp;lt;a[0][0]&amp;lt;&amp;lt;&quot; and &quot;&amp;lt;&amp;lt;**a&amp;lt;&amp;lt;&#39;\\n&#39;; return 0;}OUTPUT:" }, { "title": "Dynamic declaration and Pointer arithematic", "url": "/posts/Dynamic-declaration-and-Pointer-arithematic/", "categories": "C++", "tags": "", "date": "2020-07-21 00:00:00 +0530", "snippet": "Dynamic declaration means that we do not give memory during declaration it gets allocated during execution.This is useful for thins like having an array of user inputted size.We do this using new.When pointer is dynamically allocated as an array it points to the 0th index(first element) of the array.If we add an integer to it it will point to that position in the array.After incrementing it by one ,it will point to first index(second element) of the array.if we put * only before the pointer then the value at that posiiton is changed. #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ int *a,n,i; cout&amp;lt;&amp;lt;&quot;enter size\\n&quot;; cin&amp;gt;&amp;gt;n; a=new int[n]; cout&amp;lt;&amp;lt;&quot;Enter the elements:\\n&quot;; for(i=0;i&amp;lt;n;i++) { cin&amp;gt;&amp;gt;a[i]; } cout&amp;lt;&amp;lt;&quot;The fifth element is:&quot;&amp;lt;&amp;lt;*(a+4)&amp;lt;&amp;lt;&quot;\\n&quot;; cout&amp;lt;&amp;lt;&quot;The fifth element plus 5 is:&quot;&amp;lt;&amp;lt;*(a+4)+5&amp;lt;&amp;lt;&quot;\\n&quot;; a++; cout&amp;lt;&amp;lt;&quot;The second element is:&quot;&amp;lt;&amp;lt;*a; return 0;}OUTPUT:" }, { "title": "Pointers", "url": "/posts/Pointers/", "categories": "C++", "tags": "", "date": "2020-07-17 00:00:00 +0530", "snippet": "Pointers in C++ basically store memory locations where a variable is stored.To access its value you can use * behind its name and also to declare them.The name of an array is a constant pointer.An &amp;amp; behind a variable gives its address.The address is displayed in hexadecimal. #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ int a=9,b[]={1,2,3,4,5},*c; c=&amp;amp;a; cout&amp;lt;&amp;lt;&quot;The memory address of a is:\\n&quot;&amp;lt;&amp;lt;c&amp;lt;&amp;lt;&quot;\\nAnd its value is:\\n&quot;&amp;lt;&amp;lt;*c; cout&amp;lt;&amp;lt;&quot;\\nFirst element of b:\\n&quot;&amp;lt;&amp;lt;*b&amp;lt;&amp;lt;&quot; \\nThird element of b:\\n&quot;&amp;lt;&amp;lt;*(b+3); return 0;}OUTPUT:" }, { "title": "Structures", "url": "/posts/Structures/", "categories": "C++", "tags": "", "date": "2020-07-15 00:00:00 +0530", "snippet": "A structure can hold multiple variables similar to an array but while array can only hold one type of variables, structures can hold many types of variables including arrays.You can access inner elements using the . operator.Here we use the library math.h for the function sqrt (square root function) and ‘pow’ (power function).I use structures and the distance function to calculate distance between two points.The 2 in pow means raised to power 2. #include&amp;lt;iostream&amp;gt;#include&amp;lt;math.h&amp;gt;using namespace std;struct coordinate{ float x, y;};float distance(coordinate c1,coordinate c2){ return sqrt(pow(c1.x-c2.x,2)+pow(c1.y-c2.y,2));}int main(){ coordinate c1,c2; cout&amp;lt;&amp;lt;&quot;Enter first point&#39;s x coordinate:\\n&quot;; cin&amp;gt;&amp;gt;c1.x; cout&amp;lt;&amp;lt;&quot;Enter first point&#39;s y coordinate:\\n&quot;; cin&amp;gt;&amp;gt;c1.y; cout&amp;lt;&amp;lt;&quot;Enter second point&#39;s x coordinate:\\n&quot;; cin&amp;gt;&amp;gt;c2.x; cout&amp;lt;&amp;lt;&quot;Enter second point&#39;s y coordinate:\\n&quot;; cin&amp;gt;&amp;gt;c2.y; cout&amp;lt;&amp;lt;&quot;Distance between the points:&quot;&amp;lt;&amp;lt;distance(c1,c2); return 0;}OUTPUT:" }, { "title": "Basic Logical Operations", "url": "/posts/Basic-Logical-Operations/", "categories": "C++", "tags": "", "date": "2020-07-14 00:00:00 +0530", "snippet": "The are 3 basic logical operations in C++ i.e. &amp;amp;&amp;amp;(AND), || (OR) and !(NOT).AND means that if and only if both of the statements are true then the result is true, while OR means that if only one of the statements is true then the result is true and NOT just reverses the result. #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ int a; cout&amp;lt;&amp;lt;&quot;Enter the number:\\n&quot;; cin&amp;gt;&amp;gt;a; if((a&amp;gt;50)&amp;amp;&amp;amp;(!(a&amp;gt;75))) { cout&amp;lt;&amp;lt;&quot;The number is between 50 and 75&quot;; } else { cout&amp;lt;&amp;lt;&quot;The number is not between 50 and 75&quot;; } return 0;}OUTPUT:" }, { "title": "2-D arrays", "url": "/posts/2-d-arrays/", "categories": "C++", "tags": "", "date": "2020-07-13 00:00:00 +0530", "snippet": "Double dimension arrays store variable in a rows*columns size matrix. We input them using nested for loops which basically means one for loop inside another. Here i make use of logical AND operator(&amp;amp;&amp;amp;) which means that if and only if both the statements are true , the code inside the if is executed. The first square bracket specifies the rows, the second specifies the columns. #include&amp;lt;iostream&amp;gt;using namespace std; int main(){ int i, j; char A[5][9]; for(i=0; i&amp;lt;5; i++) { for(j=0; j&amp;lt;9; j++) { if((j&amp;gt;=i)&amp;amp;&amp;amp;(j&amp;lt;9-i)) { A[i][j]=&#39;*&#39;; } else { A[i][j]=&#39; &#39;; } } } for(i=0; i&amp;lt;5; i++) { for(j=0;j&amp;lt;9;j++) { cout&amp;lt;&amp;lt;A[i][j]; } cout&amp;lt;&amp;lt;&quot;\\n&quot;; } return 0; }OUTPUT:" }, { "title": "Functions", "url": "/posts/Functions/", "categories": "C++", "tags": "", "date": "2020-07-12 00:00:00 +0530", "snippet": "The use of functions in C++ is when we have to run the same bit of code multiple times so instead we declare a function and call it any time we have to run the code.A function has 3 parts:prototype,definition and a statement to call the function.In protoype the name of the function,the parameters(values which are given to the function) and return type(which specifies the values which it would return,void means it returns nothing).The definition is where the main code is written.The statement to call the function contains the function’s name and parameters.There are two ways of giving the parameters, call by value and call by reference.In call by value a copy of the parameters is passed so the value of the original variables does not change while in call by reference the original variable is passed under an alias so changing its value in the function changes the value of the original variable.Arrays by default are passed by reference.The protoype has to be given before calling the function,the definition however can even be given after the function is called.The words written after two forward slashes are comments,they are not executed. #include&amp;lt;iostream&amp;gt;using namespace std;void printarray(int a[])//prototype{ //defintion int i=0; for(i=0;i&amp;lt;5;i++) { cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&#39; &#39;; } cout&amp;lt;&amp;lt;&#39;\\n&#39;;}void increment(int a,int&amp;amp; b); //a is called by value while b is by referenceint main(){ int a=8,b=8,A[]={1,2,3,4,5},B[]={6,7,8,9,10}; cout&amp;lt;&amp;lt;&quot;A:\\n&quot;; printarray(A); //calling the function cout&amp;lt;&amp;lt;&quot;B:\\n&quot;; printarray(B); increment(a,b); cout&amp;lt;&amp;lt;&quot;a=&quot;&amp;lt;&amp;lt;a&amp;lt;&amp;lt;&#39; &#39;&amp;lt;&amp;lt;&quot;b=&quot;&amp;lt;&amp;lt;b; return 0;}void increment(int a,int&amp;amp; b)//definition{ a++; b++;}OUTPUT:" }, { "title": "Inputting and outputting Strings", "url": "/posts/Inputting-and-outputting-strings/", "categories": "C++", "tags": "", "date": "2020-07-11 00:00:00 +0530", "snippet": "A string is basicallly a character array, it is written in double quotes.The end of the string is represented by \\0.We can input a string by inputting it character by character or straight using cin or getline.The difference is in cin you cannot take spaces.Getline is from the strings library.for getline the variable must be declared as string which is also from the strings library while cin can use character arrays like: int word[80]cin&amp;gt;&amp;gt;word #include&amp;lt;iostream&amp;gt;#include&amp;lt;string&amp;gt;using namespace std;int main(){ int i; string word; getline(cin,word); for(i=0;word[i]!=&#39;\\0&#39;;i++) { cout&amp;lt;&amp;lt;word[i]; } return 0;}OUTPUT:" }, { "title": "Array", "url": "/posts/Array/", "categories": "C++", "tags": "", "date": "2020-07-09 00:00:00 +0530", "snippet": "An array in C++ is like a sequence of variables.Arrays have 0 based indexing which means the first element is stored in 0th place and last at size-1th place.array_name[index] gives the element at that place(index). #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ int a[5],i; for(i=0;i&amp;lt;5;i++) a[i]=i+1; for(i=0;i&amp;lt;5;i++) cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&#39; &#39;; return 0;}OUTPUT:" }, { "title": "While and do while loop", "url": "/posts/While-and-do-while-loop/", "categories": "C++", "tags": "", "date": "2020-07-08 00:00:00 +0530", "snippet": "In while and do while there is only one statement in the brackets next to while ,a condiitonal statement, which specifies when the loop ends.The difference is that in while loop first the condition is checked then the code in the loop is executed whereas in do while loop first the code is executed then it checks the condition.In the do while loop the code executes one even though i=10. #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ int i=0; while(i&amp;lt;10) { cout&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&#39; &#39;; i++; } cout&amp;lt;&amp;lt;&#39;\\n&#39;; do { cout&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&#39; &#39;; }while(i&amp;lt;10); return 0;}OUTPUT:" }, { "title": "For loop", "url": "/posts/For-loop/", "categories": "C++", "tags": "", "date": "2020-07-07 00:00:00 +0530", "snippet": "There are three commands in for loop first setting the loop variable to an initial value,the second is a logical operation which specifies when the loop ends and the third is changing the value of loop variable after each iteration.First i is intialized to 1,then it checks whether i is less than 10.After that the code in the for loop is execute then value of i is incremented by 1.The loop ends when i=10. #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ int i; for(i=1;i&amp;lt;10;i++) { cout&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&#39; &#39;; } return 0;}OUTPUT:" }, { "title": "Pre and post increment", "url": "/posts/Pre-and-post-increment/", "categories": "C++", "tags": "", "date": "2020-07-06 00:00:00 +0530", "snippet": "Both the pre(++a) and post increment(a++) in C++ means a=a+1; basically increasing the value of the variable by one but the difference between them is that in pre increment first value of a is increased by one then the line is executed whereas in post increment first the line is executed then the value of a is increased by one.Same can be said for pre(--a) and post decrement(a--). #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ int a=8,b=8,x,y; x=++a; y=b++; cout&amp;lt;&amp;lt;x&amp;lt;&amp;lt;&#39; &#39;&amp;lt;&amp;lt;a&amp;lt;&amp;lt;&#39;\\n&#39;; cout&amp;lt;&amp;lt;y&amp;lt;&amp;lt;&#39; &#39;&amp;lt;&amp;lt;b; return 0;}OUTPUT:" }, { "title": " Making a basic calculator using Switch", "url": "/posts/Making-a-basic-calculator-using-Switch/", "categories": "C++", "tags": "", "date": "2020-07-05 00:00:00 +0530", "snippet": "Switch in C++ is basically like a menu.If the variable in the switch bracket is equal to the any case then the code in that specific case and subsequent cases gets executed until it encounters a break.If none of the cases match then default statement gets executed.The (float)y is to covert y to type float so decimal answers will be printed. #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ int x,y,choice; cout&amp;lt;&amp;lt;&quot;Enter both numbers:\\n&quot;; cin&amp;gt;&amp;gt;x&amp;gt;&amp;gt;y; cout&amp;lt;&amp;lt;&quot;1.Add them\\n&quot;; cout&amp;lt;&amp;lt;&quot;2.Subtract them\\n&quot;; cout&amp;lt;&amp;lt;&quot;3.Multiply them\\n&quot;; cout&amp;lt;&amp;lt;&quot;4.Divide First by second\\n&quot;; cout&amp;lt;&amp;lt;&quot;5.Find the remainder when one gets divided by other\\n&quot;; cout&amp;lt;&amp;lt;&quot;Enter your choice:\\n&quot;; cin&amp;gt;&amp;gt;choice; switch(choice) { case 1:cout&amp;lt;&amp;lt;x+y; break; case 2:cout&amp;lt;&amp;lt;x-y; break; case 3:cout&amp;lt;&amp;lt;x*y; break; case 4:cout&amp;lt;&amp;lt;x/(float)y; break; case 5:cout&amp;lt;&amp;lt;x%y; break; default:cout&amp;lt;&amp;lt;&quot;wrong choice\\n&quot;; } return 0;}OUTPUT:" }, { "title": "If and Else", "url": "/posts/If-and-Else/", "categories": "C++", "tags": "", "date": "2020-07-04 00:00:00 +0530", "snippet": "The way if works in C++ is that we put a condition in bracket if that is satisfied the code in if executes otherwise if else is there its code executes.If there is no else present then nothing happens.Relational operators in C++ are &amp;gt;(greater than),&amp;lt;(less than),&amp;gt;=(greater than or equal to),&amp;lt;=(less than or equal to),==(equal to),!=(not equal to). #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ int x; cout&amp;lt;&amp;lt;&quot;enter the number:\\n&quot;; cin&amp;gt;&amp;gt;x; if(x&amp;gt;=10) { cout&amp;lt;&amp;lt;&quot;The number is greater than or equal to 10\\n&quot;; } else { cout&amp;lt;&amp;lt;&quot;The number is less than 10&quot;; } return 0;}OUTPUT:" }, { "title": "Basic Arithematic operations in C++", "url": "/posts/Basic-Arithematic-operations-in-C++/", "categories": "C++", "tags": "", "date": "2020-07-03 00:00:00 +0530", "snippet": "There are 5 basic arithematic operations in C++: +: add -: subtract *: multiply /: divide.Note: The second operand should not be zero and if both the operands are int then answer will rounded down to an integer , for decimal covert one of them to float. %:this gives the remainder.Note: The second operand should not be zero. #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ int a,b; cout&amp;lt;&amp;lt;&quot;enter a and b:\\n&quot;; cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b; cout&amp;lt;&amp;lt;&quot;a+b=&quot;&amp;lt;&amp;lt;a+b&amp;lt;&amp;lt;&quot;\\n&quot;; cout&amp;lt;&amp;lt;&quot;a-b=&quot;&amp;lt;&amp;lt;a-b&amp;lt;&amp;lt;&quot;\\n&quot;; cout&amp;lt;&amp;lt;&quot;axb=&quot;&amp;lt;&amp;lt;a*b&amp;lt;&amp;lt;&quot;\\n&quot;; cout&amp;lt;&amp;lt;&quot;a/b=&quot;&amp;lt;&amp;lt;a/b&amp;lt;&amp;lt;&quot;\\n&quot;; cout&amp;lt;&amp;lt;&quot;a%b=&quot;&amp;lt;&amp;lt;a%b; return 0;}OUTPUT:" }, { "title": "Taking input from user", "url": "/posts/Taking-input-from-user/", "categories": "C++", "tags": "", "date": "2020-07-02 00:00:00 +0530", "snippet": "Today we will learn how to take input from user in C++.We will do this using cin in iostream library.cin takes input from keyboard and stores it in a variable like num.\\n is used for going to next line so that output looks nice. #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ int num; char ch; cout&amp;lt;&amp;lt;&quot;enter number:\\n&quot;; cin&amp;gt;&amp;gt;num; cout&amp;lt;&amp;lt;&quot;enter character:\\n&quot;; cin&amp;gt;&amp;gt;ch; cout&amp;lt;&amp;lt;&quot;number=&quot;&amp;lt;&amp;lt;num&amp;lt;&amp;lt;&quot;\\n&quot;; cout&amp;lt;&amp;lt;&quot;character=&quot;&amp;lt;&amp;lt;ch; return 0;}OUTPUT:" }, { "title": "Declaring and printing variables", "url": "/posts/Declaring-and-printing-variables/", "categories": "C++", "tags": "", "date": "2020-07-01 00:00:00 +0530", "snippet": "Today we will learn how to declare and print variables in C++. In C++, variables can basically be declared of four types namely int,char,double and float.int is for integers,char for characters,float for decimals and double for decimals with higher precision and range.int x declares a variable x of type int. x=10 assigns the value of 10 to x.Then we use cout to print the value of x. #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ int x; x=10; cout&amp;lt;&amp;lt;&quot;x=&quot;&amp;lt;&amp;lt;x; return 0;}OUTPUT:" }, { "title": "How to print Hello World", "url": "/posts/How-to-print-hello-world/", "categories": "C++", "tags": "", "date": "2020-06-30 00:00:00 +0530", "snippet": "Today we will learn to print hello world in C++.First we would include the library iostream which has the cout which is needed to print.then we write int main() which is the function where we write the main code we need to run.The curly brackets are inside which we write our code. Then we write the cout command to print hello world.The semicolon represents the end of one line of code.As we used int main() the function requires us to return an integer so we use return 0. #include&amp;lt;iostream&amp;gt;using namespace std;int main(){ cout&amp;lt;&amp;lt;&quot;Hello World!&quot;; return 0;}OUTPUT:" } ]
